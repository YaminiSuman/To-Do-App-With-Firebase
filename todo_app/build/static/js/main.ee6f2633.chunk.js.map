{"version":3,"sources":["Todo.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","List","ListItem","ListItemAvatar","ListItemText","primary","text","secondary","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","todos","setTodos","input","setInput","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","data","todo","className","FormControl","InputLabel","Input","value","onChange","e","target","Button","disabled","type","onClick","event","preventDefault","add","timestamp","FieldValue","serverTimestamp","variant","color","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0VAoBeA,MAZf,SAAcC,GACZ,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAcC,QAASL,EAAMM,KAAMC,UAAU,a,iBCA/CC,EAXcC,IAASC,cAAc,CACzCC,OAAQ,0CACRC,WAAY,oCACZC,YAAa,2CACbC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGMC,YC4CRC,MAnDf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEaF,mBAAS,IAFtB,mBAENG,EAFM,KAECC,EAFD,KAqBb,OAjBAC,qBAAU,WACRlB,EAAGmB,WAAW,SACXC,QAAQ,YAAa,QACrBC,YAAW,SAAAC,GACVP,EAASO,EAASC,KAAKC,KAAI,SAAAC,GAAG,OAAIA,EAAIC,OAAOC,cAEhD,IAYD,yBAAKC,UAAU,OACb,mCAEA,8BACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,oBACA,kBAACC,EAAA,EAAD,CAAOC,MAAOhB,EAAOiB,SAAU,SAAAC,GAAC,OAAIjB,EAASiB,EAAEC,OAAOH,WAExD,kBAACI,EAAA,EAAD,CACEC,UAAWrB,EACXsB,KAAK,SACLC,QArBS,SAAAC,GACfA,EAAMC,iBACNzC,EAAGmB,WAAW,SAASuB,IAAI,CACzBf,KAAMX,EACN2B,UAAW1C,IAASU,UAAUiC,WAAWC,oBAE3C9B,EAAS,GAAD,mBAAKD,GAAL,CAAYE,KACpBC,EAAS,KAeH6B,QAAQ,YACRC,MAAM,WALR,cAWF,4BACGjC,EAAMU,KAAI,SAAAG,GAAI,OACb,kBAAC,EAAD,CAAM7B,KAAM6B,UCrCFqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ee6f2633.chunk.js","sourcesContent":["import {\r\n  List,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemText\r\n} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport \"./Todo.css\";\r\nfunction Todo(props) {\r\n  return (\r\n    <List>\r\n      <ListItem>\r\n        <ListItemAvatar></ListItemAvatar>\r\n        <ListItemText primary={props.text} secondary=\"Todo:\" />\r\n      </ListItem>\r\n      {/* <li>{props.text}</li> */}\r\n    </List>\r\n  );\r\n}\r\n\r\nexport default Todo;\r\n","import firebase from \"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n  apiKey: \"AIzaSyCg02vSNBfstGIF9XTGPXfBGtlpIx_crPg\",\r\n  authDomain: \"todo-app-cp-5f9e9.firebaseapp.com\",\r\n  databaseURL: \"https://todo-app-cp-5f9e9.firebaseio.com\",\r\n  projectId: \"todo-app-cp-5f9e9\",\r\n  storageBucket: \"todo-app-cp-5f9e9.appspot.com\",\r\n  messagingSenderId: \"889544037055\",\r\n  appId: \"1:889544037055:web:49fef80572ae54f2142c0a\",\r\n  measurementId: \"G-LYRCG20TMQ\"\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport { db };\r\n// const auth = firebase.auth();\r\n// const storage = firebase.storage();\r\n//export { db, auth, storage };\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { Button, FormControl, InputLabel, Input } from \"@material-ui/core\";\nimport Todo from \"./Todo\";\nimport { db } from \"./firebase\";\nimport firebase from \"firebase\";\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [input, setInput] = useState(\"\");\n\n  useEffect(() => {\n    db.collection(\"todos\")\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot(snapshot => {\n        setTodos(snapshot.docs.map(doc => doc.data().todo));\n      });\n  }, []);\n\n  const addTodos = event => {\n    event.preventDefault();\n    db.collection(\"todos\").add({\n      todo: input,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    });\n    setTodos([...todos, input]);\n    setInput(\"\");\n  };\n  return (\n    <div className=\"App\">\n      <h2>Hey</h2>\n\n      <form>\n        <FormControl>\n          <InputLabel>Type a Todo</InputLabel>\n          <Input value={input} onChange={e => setInput(e.target.value)} />\n        </FormControl>\n        <Button\n          disabled={!input}\n          type=\"submit\"\n          onClick={addTodos}\n          variant=\"contained\"\n          color=\"primary\"\n        >\n          Add Todos\n        </Button>\n      </form>\n\n      <ul>\n        {todos.map(todo => (\n          <Todo text={todo} />\n          // <li>{todo}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n\n// https://github.com/sagarkb/Todo-App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}